<?php
include_once(dirname(BASEPATH).'/inherit/BaseModel.php');
class Order_model extends BaseModel{
	/**
	 * @var table
	 */
	protected $table = "t_sell_order";
	protected $pk = "id";

	/**
	 * @fields
	 */
	public $id,$order_num,$user_id,$client_id,$shop_id,$total_num,$total_price,$payment,$status,$remark,$create_at,$update_at,$create_user_id,$update_user_id;
	public $total_amount,$delivery_type,$delivery_addr,$receipt_date,$remark_images;
	public $isPrinted,$isReceipted;
	public $allocate_mode,$type;

	/**
	 * Order_model constructor.
	 */
	function __construct(){
		$this->load->model('sell/order/OrderSpu_model',"MSpu",true);
		$this->load->model('sell/order/OrderSku_model',"MSku",true);
        $this->load->model('sell/allocate/Allocate_model',"m_allocate",true);
		$this->load->model('sell/allocate/AllocateItem_model',"m_allocate_item",true);
        $this->load->model('sell/refund/RefundItem_model',"m_refund_item",true);
        $this->load->model("depot/api_model","m_depot_api",true);

        $this->load->model('admin/User_model',"m_user",true);
	}

	/**
	 * @return array
	 */
	static function attributeLabels()
	{
		return [
			'id' => 'ID',
			'order_num' => '销售单号',
			'user_id' => '销售员ID',
			'client_id' => '客户ID',
            'shop_id' => '店铺ID',
			'total_num' => '合计数量',
			'total_price' => '合计金额',
			'total_amount'=> '订单金额',
			'payment' => '支付方法',
			'remark' => '备注',
			'status' => '状态',
            'statusName' => '状态',
			'create_at' => '创建时间',
			'update_at' => '更新时间',
			'create_user_id' => '创建人ID',
			'update_user_id' => '更新人ID',
			'delivery_type'=>'收货方式',
			'delivery_addr'=>'收货地址',
			'receipt_date'=>'收款日期',
			'remark_images'=>'图片备注',

			'creater' => "制单人",
			'shopName' => "需求店铺",
		];
	}

	/**
	 * @return object
	 */
	static function describe()
	{
		$data = (object)array();
		$data->desc = "销售订单";
		$data->name = "From";

		return $data;
	}

	/**
	 * 保存前执行
	 */
	protected function beforeSave()
	{
		//设置时区
		date_default_timezone_set('Asia/Shanghai');

		//保存当前时间戳
		$this->update_at = time();
		$this->update_user_id = $this->session->uid;

		//如果是新增
		if(empty($this->id)){
			$this->create_at = time();
			$this->create_user_id = $this->session->uid;
			$this->total_amount = $this->total_price;
			$this->isPrinted = false;
		}

		//设置打印状态
		if((int)$this->isPrinted == 1)
			$this->isPrinted = true;
		else
			$this->isPrinted = false;

		//设置支付状态
		if(empty($this->receipt_date))
			$this->isReceipted = false;
		else
			$this->isReceipted = true;

		//父类方法
		parent::beforeSave(); // TODO: Change the autogenerated stub
	}

    /**
	 * 获取支付方式
     * @return mixed
     */
	public function getPaymentName(){
		$map = $this->getPaymentMap();
		return $map[$this->payment];
	}

    /**
     * 获取状态映射表
     * @return object
     */
    public function getStatusMap(){
        return [
            0=> "待配货",
            1=> "部分配货",
            2=> "完成配货",
            3=> "已作废",
            4=> "有退货",
        ];
    }

	/**
	 * 获取状态名
	 * @return string
	 */
	public function getStatusName(){
		$map = $this->getStatusMap();
		return $map[$this->status];
	}

	/**
	 * 获取配货类型名
	 */
	public function getAllocateModeName(){
		$list = $this->getAllocateModeMap();
		$name = $list[$this->allocate_type];
		return $name;
	}

	/**
	 * 获取配货类型表
	 */
	public function getAllocateModeMap(){
		return [
			0=> "默认",
			1=> "定制",
			2=> "齐了配",
			3=> "单款配齐",
		];
	}

	/**
	 * 支付方式映射
	 */
	public function getPaymentMap(){
		return [
			0=> "默认付款方式",
			1=> "现金",
			2=> "银行汇款",
			3=> "POS机刷卡",
			4=> "其他",
			5=> "微信",
            6=> "支付宝",
			7=> "未付",
		];
	}

	/**
	 * 添加/修改
	 */
	public function updateOrder($data){
		//开始事务
		$this->db->trans_strict(FALSE);
		$this->db->trans_begin();

		//保存订单
		$this->load_safe($data);
		$this->save();

		//删除所有旧项
		$this->MSpu->deleteAll(["order_id" => $this->id]);
		$this->MSku->deleteAll(["order_id" => $this->id]);

		//遍历spu
		foreach($data["selectList"] as $spu_data){
			//去除多余字段
			unset($spu_data["filter"]);
			//保存SPU
			$spu = $this->MSpu->_new();
			$spu->load_safe($spu_data);
			$spu->order_id = $this->id;
			$spu->save();
			//遍历sku
			foreach($spu_data["skus"] as $sku_data){
				//去除多余字段
				unset($sku_data["num_allocat"]);
				//保存SPU
				$sku = $this->MSku->_new();
				$sku->load_safe($sku_data);
				$sku->order_id = $this->id;
				$sku->order_spu_id = $spu->id;
				$sku->save();
			}
		}

		//事务结束处理
		if ($this->db->trans_status() === FALSE)
		{
			$this->db->trans_rollback();
			return false;
		}
		else
		{
			$this->db->trans_commit();
			return true;
		}
	}

	/** 直接报货 */
    public function updateDelivery($data){
        //开始事务
        $this->db->trans_strict(FALSE);
        $this->db->trans_begin();

        //保存订单
        $this->load_safe($data);
        $this->save();

        //删除所有旧项
        $this->MSpu->deleteAll(["order_id" => $this->id]);
        $this->MSku->deleteAll(["order_id" => $this->id]);

        //生成报货单
        $allocate = $this->m_allocate->_new();
        $allocate->order_id = $this->id;
        $allocate->order_num = $this->m_allocate->createOrderNum();
        $allocate->total_num = $this->total_num;
        $allocate->remark = "直接报货";
        $allocate->save();

        //遍历spu
        foreach($data["selectList"] as $spu_data){
            //保存SPU
            unset($spu_data["filter"]);
            $spu = $this->MSpu->_new();
            $spu->load_safe($spu_data);
            $spu->order_id = $this->id;
            $spu->save();
            //遍历sku
            foreach($spu_data["skus"] as $sku_data){
                //保存SKU
                unset($sku_data["num_allocat"]);
                $sku = $this->MSku->_new();
                $sku->load_safe($sku_data);
                $sku->order_id = $this->id;
                $sku->order_spu_id = $spu->id;
                $sku->save();
                //保存报货单项
                $item = $this->m_allocate_item->_new();
                $item->order_id = $this->id;
                $item->allocate_id = $allocate->id;
                $item->order_spu_id = $spu->id;
                $item->order_sku_id = $sku->id;
                $item->spu_id = $spu->spu_id;
                $item->sku_id = $sku->sku_id;
                $item->num = $sku->num;
                $item->send_num = $sku->num;
                $item->status = 0;
                $item->save();
            }
        }


        //事务结束处理
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
            return false;
        }
        else
        {
            $this->db->trans_commit();
            return true;
        }
    }

	/**
	 * 生成销售单号
	 * */
	public function createOrderNum(){
		list($t1, $t2) = explode(' ', microtime());
		$time = (float)sprintf('%.0f',(floatval($t1)+floatval($t2))*1000);
		return "HXS".$time;
	}

	/**
	 * 联表模糊查询
	 * @param array $condition
	 * @param array $sort
	 * @return object
	 */
	public function searchLikeJoinAll($searchKey,$condition=[],$sort=[]){
		//按照加官，使用sql前所有字段加F
		$condition = $this->addPrefixKeyValue($condition);
		$sort = $this->addPrefixKeyValue($sort);

		//字段添加表名
		$condition_table = array();
		foreach($condition as $key=>$value){
			$condition_table[$this->table.".".$key] = $value;
		}

		//查找数量
		//$count = $this->db->where($condition)->count_all_results($this->table);
		$count = $this->getCount($condition_table);

		//条件筛选
		$select = $this->db
			->select(array(
				$this->table.".*",
				"client.Fname as Fclient_name",
				"client.Fphone as Fclient_phone",
				"user.Fname as Fseller_name",
			))
			->where($condition_table);

		//模糊条件
		$select = $select->group_start()
			->or_like('client.Fname', $searchKey)
			->or_like('client.Fphone', $searchKey)
			->or_like('user.Fname', $searchKey)
			->or_like($this->table.'.Ftotal_amount', $searchKey)
			->group_end();

		//排序
		foreach($sort as $key=>$value){
			$key = $this->table.".".$key;
			$select = $select->order_by($key,$value);
		}

		//连接表
		$select = $select
			->join('client', $this->table.'.Fclient_id = client.Fid', 'left')
			->join('user', $this->table.'.Fuser_id = user.Fuid', 'left');

		//查询表
		$select = $select->get($this->table);

		//构成返回结果
		$list = array();
		foreach($select->result() as $data){
			$item = $this->_new();
			$item->load((array)$data);
			$list[] = $item;
		}

		//返回
		$result = (object)array();
		$result->list = $list;
		$result->count = $count;
		$result->model = $this;
		return $result;
	}

	/**
	 * 修改状态
	 */
	public function changeStatus($value,$allowBack = false){
		if(!$allowBack && (int)$this->status <= (int)$value)
			$this->status = $value;
		else if($allowBack)
			$this->status = $value;
	}

	/**
	 * 获取订单下，所有Sku配货列表(包含已经配货数量)
	 * string $filterAllocatId：统计配货数量时，过滤掉得配货单ID
	 */
	public function getAllocateSkuList($filter_id=null){
		//获取所有spu
		$order_spus = $this->m_spu->searchAll(["order_id"=>$this->id])->list;
		$order_skus = $this->m_sku->searchAll(["order_id"=>$this->id])->list;

        //获取报配数量和退货数量
        $allocated = $this->m_allocate_item->getAllocateStatus($this->id,$filter_id);
        $refund = $this->m_refund_item->getRefundStatus($this->id,$filter_id);

		//获取
		$list = array();
		foreach($order_spus as $order_spu){
			foreach($order_skus as $order_sku){
				//过滤
				if($order_spu->id != $order_sku->order_spu_id)
					continue;

				//设置项目
				$item = $this->m_allocate_item->_new();
				$item->order_id = $this->id;
				$item->order_spu_id = $order_spu->id;
				$item->order_sku_id = $order_sku->id;
				$item->spu_id = $order_spu->spu_id;
				$item->sku_id = $order_sku->sku_id;
				$item->num = 0;
				$item->status = 0;
				$item->spu = $order_spu;
				$item->sku = $order_sku;

                //设置数量
                $item->num_order = (int)$order_sku->num;                                                      //订单数量
                $item->num_allocate = isset($allocated[$order_sku->id])?(int)$allocated[$order_sku->id]:0;   //配货数量
                $item->num_allocated = $this->getRefundedNum($order_sku);                                     //配货完成数量
                $item->num_refund = isset($refund[$order_sku->id])?(int)$refund[$order_sku->id]:0;;          //退货数量
                $item->num_refunded = $this->getRefundedNum($order_sku);                                      //退货完成数量

				//添加到列表
				$list[] = $item;
			}
		}

		//返回
		return $list;
	}

    /**
     * 获取订单下，所有Sku退货列表(包含已经退货数量)
     * string $filterId：统计配货数量时，过滤掉得配货单ID
     */
	public function getRefundSkuList($filter_id=null){
        //获取所有spu
        $order_spus = $this->m_spu->searchAll(["order_id"=>$this->id])->list;
        $order_skus = $this->m_sku->searchAll(["order_id"=>$this->id])->list;

        //获取报配数量和退货数量
        $allocated = $this->m_allocate_item->getAllocateStatus($this->id,$filter_id);
        $send = $this->m_allocate_item->getSendStatus($this->id,$filter_id);
        $refund = $this->m_refund_item->getRefundStatus($this->id,$filter_id);

        //获取
        $list = array();
        foreach($order_spus as $order_spu){
            foreach($order_skus as $order_sku){
                //过滤
                if($order_spu->id != $order_sku->order_spu_id)
                    continue;

                //设置项目
                $item = $this->m_refund_item->_new();
                $item->order_id = $this->id;
                $item->order_spu_id = $order_spu->id;
                $item->order_sku_id = $order_sku->id;
                $item->spu_id = $order_spu->spu_id;
                $item->sku_id = $order_sku->sku_id;
                $item->num = 0;
                $item->status = 0;
                $item->spu = $order_spu;
                $item->sku = $order_sku;

                //设置数量
                $item->num_order = (int)$order_sku->num;                                                      //订单数量
				$item->num_allocate = isset($allocated[$order_sku->id])?(int)$allocated[$order_sku->id]:0;   //配货数量
				$item->num_allocated = $this->getRefundedNum($order_sku);                                     //配货完成数量
				$item->num_refund = isset($refund[$order_sku->id])?(int)$refund[$order_sku->id]:0;;          //退货数量
				$item->num_refunded = $this->getRefundedNum($order_sku);                                      //退货完成数量
                $item->num_send = isset($send[$order_sku->id])?(int)$send[$order_sku->id]:0;        //已配数量

                //添加到列表
                $list[] = $item;
            }
        }

        //返回
        return $list;
    }

    /**
     * 获取Sku可配货列表
     */
    public function getSkuCanAllocate($filter_id=null){
        $list = $this->getAllocateSkuList($filter_id);
        $result = array();
        foreach ($list as $item){
            $result[$item->sku_id]=$item->num_order - $item->num_allocate;
        }
        return $result;
    }

    /**
	 * 获取sku可退货列表
     * @param null $filter_id
     * @return array
     */
    public function getSkuCanRefund($filter_id = null){
        $list = $this->getRefundSkuList($filter_id);
        $result = array();
        foreach ($list as $item){
            $result[$item->sku_id]=$item->num_order - $item->num_refund;
        }
        return $result;
	}

	/**
	 * 获取精选客户
	 */
	public function getReportClient($params = array()){
		$select = $this->db
			->select([
				"$this->table.Fclient_id",
				"t_client.Fname AS Fclient_name",
				"t_sell_order_spu.Fspu_id",
				"t_sell_order_sku.Fsku_id",
				"t_sell_order_sku.Fcolor",
				"t_sell_order_sku.Fsize",
				"SUM(t_sell_order_sku.Fnum) AS Fnum",
				"SUM(t_sell_order_sku.Fnum * t_sell_order_spu.Fsnap_price) AS Famount",
			])
			->join('t_client', "$this->table.Fclient_id = t_client.Fid", 'left')
			->join('t_sell_order_spu', "$this->table.Fid = t_sell_order_spu.Forder_id", 'left')
			->join('t_sell_order_sku', "t_sell_order_spu.Fid = t_sell_order_sku.Forder_spu_id", 'left')
			->group_by("$this->table.Fclient_id,t_sell_order_spu.Fspu_id
			,t_sell_order_sku.Fsku_id,t_sell_order_sku.Fcolor,t_sell_order_sku.Fsize");

		//筛选条件
		if(isset($params["start_date"]) && !empty($params["start_date"]))
			$select = $select->where("$this->table.Fcreate_at >=", strtotime($params["start_date"]));
		if(isset($params["stop_date"]) && !empty($params["stop_date"]))
			$select = $select->where("$this->table.Fcreate_at <=", strtotime($params["stop_date"]));
		if(isset($params["spu_id"]) && !empty($params["spu_id"]))
			$select = $select->like("t_sell_order_spu.Fspu_id",$params["spu_id"]);
		if(isset($params["client_name"]) && !empty($params["client_name"]))
			$select = $select->like("t_client.Fname",$params["client_name"]);

		//过滤作废状态
        $select = $select->where("$this->table.Fstatus !=",3);

		//查询表
		$select = $select->get($this->table);

		//DEBUG
		//echo $this->db->last_query();
		//die;

		//构成返回结果，并遍历添加SKU
		$list = array();
		foreach($select->result() as $data){
			if(isset($list[$data->client_id])){
				//判断是否有SKU项
				if(isset($list[$data->client_id]->sku[$data->sku_id])){
					//存在则累加数量
					$list[$data->client_id]->sku[$data->sku_id]->num += (int)$data->num;
					$list[$data->client_id]->sku[$data->sku_id]->amount += (int)$data->amount;
				}
				else{
					//不存在则添加项
					$sku_item = (object)array(
						"spu_id"=>$data->spu_id,
						"sku_id"=>$data->sku_id,
						"color"=>$data->color,
						"size"=>$data->size,
						"num"=>(int)$data->num,
						"amount"=>(double)$data->amount,
					);
					$list[$data->client_id]->sku[$data->sku_id] = $sku_item;
					$list[$data->client_id]->sku_count ++;
				}
				//累加总数量
				$list[$data->client_id]->num += (int)$data->num;
				$list[$data->client_id]->amount += (int)$data->amount;
			}
			else
			{
				//设置数据
				$item = (object)array(
					"client_id"=>$data->client_id,
					"client_name"=>$data->client_name,
					"num"=>(int)$data->num,
					"amount"=>(double)$data->amount,
					"sku_count"=>1,
				);
				$sku_item = (object)array(
					"spu_id"=>$data->spu_id,
					"sku_id"=>$data->sku_id,
					"color"=>$data->color,
					"size"=>$data->size,
					"num"=>(int)$data->num,
					"amount"=>(double)$data->amount,
				);
				$item->sku[$data->sku_id] = $sku_item;

				//添加到列表
				$list[$data->client_id] = $item;
			}
		}

		//返回
		return $list;
	}

	/**
	 * 获取日报表
	 */
	public function getReportDate($params = array()){
		$select = $this->db
			->select([
				"t_sell_order_spu.Fspu_id",
				"t_sell_order_spu.Fsnap_pic",
				"t_sell_order_spu.Fsnap_pic_normal",
				"t_sell_order_sku.Fsku_id",
				"t_sell_order_sku.Fcolor",
				"t_sell_order_sku.Fsize",
				"SUM(t_sell_order_sku.Fnum) AS Fnum",
				"SUM(t_sell_order_sku.Fnum * t_sell_order_spu.Fsnap_price) AS Famount",
			])
			->join('t_client', "$this->table.Fclient_id = t_client.Fid", 'left')
			->join('t_sell_order_spu', "$this->table.Fid = t_sell_order_spu.Forder_id", 'left')
			->join('t_sell_order_sku', "t_sell_order_spu.Fid = t_sell_order_sku.Forder_spu_id", 'left')
			->group_by("t_sell_order_spu.Fspu_id,t_sell_order_spu.Fsnap_pic,t_sell_order_spu.Fsnap_pic_normal
			,t_sell_order_sku.Fsku_id,t_sell_order_sku.Fcolor,t_sell_order_sku.Fsize");

		//筛选条件
		if(isset($params["start_date"]) && !empty($params["start_date"]))
			$select = $select->where("$this->table.Fcreate_at >=", strtotime($params["start_date"]));
		if(isset($params["stop_date"]) && !empty($params["stop_date"]))
			$select = $select->where("$this->table.Fcreate_at <=", strtotime($params["stop_date"]));
		if(isset($params["spu_id"]) && !empty($params["spu_id"]))
			$select = $select->like("t_sell_order_spu.Fspu_id",$params["spu_id"]);
		if(isset($params["client_name"]) && !empty($params["client_name"]))
			$select = $select->like("t_client.Fname",$params["client_name"]);

        //过滤作废状态
        $select = $select->where("$this->table.Fstatus !=",3);

		//查询表
		$select = $select->get($this->table);

		//DEBUG
		//var_dump($select->result());
		//echo $this->db->last_query();
		//die;

		//构成返回结果，并遍历添加SKU
		$list = array();
		foreach($select->result() as $data){
			//判断是否有此SPU项目
			if(isset($list[$data->spu_id]))
			{
				//判断是否有SKU项
				if(isset($list[$data->spu_id]->sku[$data->sku_id])) {
					//存在则累加数量
					$list[$data->client_id]->sku[$data->sku_id]->num += (int)$data->num;
					$list[$data->client_id]->sku[$data->sku_id]->amount += (int)$data->amount;
				}
				else{
					//不存在则添加项
					$sku_item = (object)array(
						"sku_id"=>$data->sku_id,
						"color"=>$data->color,
						"size"=>$data->size,
						"num"=>(int)$data->num,
						"amount"=>(double)$data->amount,
					);
					$list[$data->spu_id]->sku[$data->sku_id] = $sku_item;
					$list[$data->spu_id]->sku_count ++;
				}
				//累加总数量
				$list[$data->spu_id]->num += (int)$data->num;
				$list[$data->spu_id]->amount += (int)$data->amount;
			}
			else
			{
				//设置数据
				$item = (object)array(
					"spu_id"=>$data->spu_id,
					"snap_pic"=>$data->snap_pic,
					"snap_pic_normal"=>$data->snap_pic_normal,
					"num"=>(int)$data->num,
					"amount"=>(double)$data->amount,
					"sku_count" => 1,
				);
				$sku_item = (object)array(
					"sku_id"=>$data->sku_id,
					"color"=>$data->color,
					"size"=>$data->size,
					"num"=>(int)$data->num,
					"amount"=>(double)$data->amount,
				);
				$item->sku[$data->sku_id] = $sku_item;

				//添加到列表
				$list[$data->spu_id] = $item;
			}
		}

		//返回
		return $list;
	}

    /**
     * 获取店铺列表
     */
    public function getShopList(){
        $select = $this->db->get("t_shop");
        $list = $select->result();
        return $list;
    }

	//region 对外接口获取的方法

    /**
     * 获取处理好的商列表
     * @return array
     */
    public function getGoods(){
        $spus = $this->MSpu->searchAll(['order_id'=>$this->id]);
        $skus = $this->MSku->searchAll(['order_id'=>$this->id]);
        $allocate = $this->m_allocate_item->getAllocateStatus($this->id);
        $refund = $this->m_refund_item->getRefundStatus($this->id);
        $list = array();
        foreach($spus->list as $spu){
            $item = $spu;
            $item->skus = array();
            foreach($skus->list as $sku){
                if($sku->order_spu_id == $spu->id){
                    //添加配货数量
                    foreach($allocate as $key=>$value){
                        if($key == $sku->id)
                            $sku->num_allocat = $value;
                    }
                    if(!isset($sku->num_allocat))
                        $sku->num_allocat = '0';

                    //添加退货数量
                    foreach($refund as $key=>$value){
                        if($key == $sku->id)
                            $sku->num_refund = $value;
                    }
                    if(!isset($sku->num_refund))
                        $sku->num_refund = '0';

                    //获取配货数量
                    $sku->num_allocated = $this->getAllocatedNum($sku);

                    //获取退货完成数量
                    $sku->num_refunded = $this->getRefundedNum($sku);

                    //获取库存相关数量
					$depot_data = $this->m_depot_api->get_sku_id_data($sku->sku_id);
                    $sku->depot_weipei_count = isset($depot_data["weipei_count"])?$depot_data["weipei_count"]:0;
                    $sku->depot_send_count = isset($depot_data["send_count"])?$depot_data["send_count"]:0;
                    $sku->depot_count = isset($depot_data["count"])?$depot_data["count"]:0;

                    //添加sku
                    $spu->skus[] = $sku;
                }
                //添加退货数量

            }
            $list[] = $item;
        }
        return $list;
    }

	//获取配货完成数量
	public function getAllocatedNum($sku){
		return 0;
	}

	//获取退货完成数量
	public function getRefundedNum($sku){
		return 0;
	}

	//endregion

	//region 直接报货相关

	private $user_info;

	//获取创建人
	public function getCreater(){
		if(!$this->user_info)
            $this->user_info = $this->m_user->get_user_info($this->user_id);

		return $this->user_info["name"];
	}

	//获取需求店铺
	public function getShop(){
        if($this->shop_id){
            $select = $this->db->where(["Fid"=>$this->shop_id])->get("t_shop");
            $row = $select->row();
            return $row;
        }
        else{
            return null;
        }
	}

	//获取需求店铺名
    public function getShopName(){
        $shop = $this->getShop();
		if($shop)
			return $shop->name;
		else
			return null;
    }

	//endregion
}
?>    